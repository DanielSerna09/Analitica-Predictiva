{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copia de Untitled0.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DanielSerna09/Proyecto-01/blob/master/Analisis%20de%20sentimientos\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T7RM6Vw2Odl-",
        "colab_type": "code",
        "outputId": "84110831-0a71-42b6-8f68-e20549ff5fe8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "\n",
        "df = pd.read_csv(\n",
        "    \"https://raw.githubusercontent.com/jdvelasq/datalabs/master/datasets/amazon_cells_labelled.tsv\",\n",
        "    sep = '\\t',           \n",
        "    thousands = None,    \n",
        "    decimal = '.',   \n",
        "    header = None,\n",
        "    names=['text','type'],\n",
        "    encoding='latin-1') \n",
        "\n",
        "prec_train = []\n",
        "prec_test = []\n",
        "\n",
        "\n",
        "for k in range(1, 28):\n",
        "  \n",
        "  count_vect = CountVectorizer(\n",
        "      analyzer='word',      \n",
        "      lowercase=True,       \n",
        "      stop_words='english', \n",
        "      min_df=k)  \n",
        "\n",
        "  df_cmp = df[df.type.notna()]\n",
        "\n",
        "  #\n",
        "  # set de entrenamiento\n",
        "  #\n",
        "  df_train = df_cmp.loc[0:500,]\n",
        "  dtm_train = count_vect.fit_transform(df_train.text)\n",
        "  X_train = dtm_train\n",
        "  y_train_true = df_train.type\n",
        "\n",
        "  if k == 4:\n",
        "      words = count_vect.get_feature_names()\n",
        "      freq = sum(X_train)\n",
        "\n",
        "  \n",
        "  \n",
        "  #\n",
        "  # set de prueba\n",
        "  #\n",
        "  df_test = df_cmp.loc[500:,]\n",
        "  dtm_test = count_vect.transform(df_test.text)\n",
        "  X_test = dtm_test\n",
        "  y_test_true = df_test.type\n",
        "\n",
        "  #\n",
        "  # entrenamiento y pronostico\n",
        "\n",
        "  clf = BernoulliNB()\n",
        "  clf.fit(\n",
        "      X_train.toarray(), \n",
        "      y_train_true)\n",
        "\n",
        "  y_train_pred = clf.predict(\n",
        "      X_train.toarray())\n",
        "\n",
        "  y_test_pred = clf.predict(\n",
        "      X_test.toarray())\n",
        "\n",
        "  C_train = confusion_matrix(\n",
        "      y_train_true,\n",
        "      y_train_pred)\n",
        "\n",
        "  C_test = confusion_matrix(\n",
        "      y_test_true,\n",
        "      y_test_pred)\n",
        "\n",
        "  precision_train = (C_train[0][0] + C_train[1][1]) / sum(sum(C_train))\n",
        "  prec_train.append(precision_train)\n",
        "\n",
        "\n",
        "  precision_test = (C_test[0][0] + C_test[1][1]) / sum(sum(C_test))\n",
        "  prec_test.append(precision_test)\n",
        "\n",
        "\n",
        "print(prec_train)\n",
        "print(prec_test)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "plt.plot(range(1,28), prec_train, color='red', linewidth = 2)\n",
        "plt.plot(range(1,28), prec_test, color='blue', linewidth = 2);\n",
        "plt.grid()\n",
        "\n",
        "\n",
        "import altair as alt\n",
        "\n",
        "w = pd.DataFrame({\n",
        "    'words': words,\n",
        "    'freq': freq.toarray()[0] })\n",
        "\n",
        "alt.Chart(w).mark_bar().encode(\n",
        "    x = 'freq:Q',\n",
        "    y = alt.Y('words:N', sort=alt.EncodingSortField(field='freq:Q')),\n",
        "    color = 'freq:Q'\n",
        ")\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.9636363636363636, 0.8848484848484849, 0.8121212121212121, 0.7515151515151515, 0.7393939393939394, 0.7151515151515152, 0.7151515151515152, 0.6787878787878788, 0.6848484848484848, 0.6424242424242425, 0.6424242424242425, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.6181818181818182, 0.5272727272727272, 0.5272727272727272, 0.5272727272727272, 0.5272727272727272]\n",
            "[0.6706586826347305, 0.7137724550898203, 0.704191616766467, 0.7089820359281437, 0.6766467065868264, 0.6622754491017964, 0.6610778443113773, 0.6562874251497006, 0.6538922155688622, 0.5940119760479042, 0.5940119760479042, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.5700598802395209, 0.4946107784431138, 0.4946107784431138, 0.4946107784431138, 0.4946107784431138]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Chart({\n",
              "  data:            words  freq\n",
              "  0        battery     9\n",
              "  1            car     4\n",
              "  2           case     5\n",
              "  3        charger     7\n",
              "  4    comfortable     4\n",
              "  5   disappointed     4\n",
              "  6           does     5\n",
              "  7            ear     6\n",
              "  8      excellent     4\n",
              "  9           good    10\n",
              "  10         great    24\n",
              "  11       headset    11\n",
              "  12      headsets     4\n",
              "  13          item     4\n",
              "  14          just     6\n",
              "  15          like     8\n",
              "  16          love     5\n",
              "  17         money     4\n",
              "  18          nice     7\n",
              "  19         phone    30\n",
              "  20          poor     5\n",
              "  21       product     8\n",
              "  22       quality     9\n",
              "  23         right     5\n",
              "  24         sound     5\n",
              "  25         think     4\n",
              "  26          time     5\n",
              "  27           use     8\n",
              "  28            ve    10\n",
              "  29         waste     4\n",
              "  30          work     7\n",
              "  31         works    11,\n",
              "  encoding: FacetedEncoding({\n",
              "    color: Color({\n",
              "      field: 'freq',\n",
              "      type: 'quantitative'\n",
              "    }),\n",
              "    x: X({\n",
              "      field: 'freq',\n",
              "      type: 'quantitative'\n",
              "    }),\n",
              "    y: Y({\n",
              "      field: 'words',\n",
              "      sort: EncodingSortField({\n",
              "        field: 'freq:Q'\n",
              "      }),\n",
              "      type: 'nominal'\n",
              "    })\n",
              "  }),\n",
              "  mark: 'bar'\n",
              "})"
            ],
            "text/html": [
              "<!DOCTYPE html>\n",
              "<html>\n",
              "<head>\n",
              "  <style>\n",
              "    .vega-actions a {\n",
              "        margin-right: 12px;\n",
              "        color: #757575;\n",
              "        font-weight: normal;\n",
              "        font-size: 13px;\n",
              "    }\n",
              "    .error {\n",
              "        color: red;\n",
              "    }\n",
              "  </style>\n",
              "  <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega@5\"></script>\n",
              "  <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega-lite@3.3.0\"></script>\n",
              "  <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm//vega-embed@4\"></script>\n",
              "</head>\n",
              "<body>\n",
              "  <div id=\"altair-viz\"></div>\n",
              "  <script>\n",
              "      var spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}, \"mark\": {\"tooltip\": null}}, \"data\": {\"name\": \"data-bda358b52741d05c4b6229e67d3b4c97\"}, \"mark\": \"bar\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"freq\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"freq\"}, \"y\": {\"type\": \"nominal\", \"field\": \"words\", \"sort\": {\"field\": \"freq:Q\"}}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v3.3.0.json\", \"datasets\": {\"data-bda358b52741d05c4b6229e67d3b4c97\": [{\"words\": \"battery\", \"freq\": 9}, {\"words\": \"car\", \"freq\": 4}, {\"words\": \"case\", \"freq\": 5}, {\"words\": \"charger\", \"freq\": 7}, {\"words\": \"comfortable\", \"freq\": 4}, {\"words\": \"disappointed\", \"freq\": 4}, {\"words\": \"does\", \"freq\": 5}, {\"words\": \"ear\", \"freq\": 6}, {\"words\": \"excellent\", \"freq\": 4}, {\"words\": \"good\", \"freq\": 10}, {\"words\": \"great\", \"freq\": 24}, {\"words\": \"headset\", \"freq\": 11}, {\"words\": \"headsets\", \"freq\": 4}, {\"words\": \"item\", \"freq\": 4}, {\"words\": \"just\", \"freq\": 6}, {\"words\": \"like\", \"freq\": 8}, {\"words\": \"love\", \"freq\": 5}, {\"words\": \"money\", \"freq\": 4}, {\"words\": \"nice\", \"freq\": 7}, {\"words\": \"phone\", \"freq\": 30}, {\"words\": \"poor\", \"freq\": 5}, {\"words\": \"product\", \"freq\": 8}, {\"words\": \"quality\", \"freq\": 9}, {\"words\": \"right\", \"freq\": 5}, {\"words\": \"sound\", \"freq\": 5}, {\"words\": \"think\", \"freq\": 4}, {\"words\": \"time\", \"freq\": 5}, {\"words\": \"use\", \"freq\": 8}, {\"words\": \"ve\", \"freq\": 10}, {\"words\": \"waste\", \"freq\": 4}, {\"words\": \"work\", \"freq\": 7}, {\"words\": \"works\", \"freq\": 11}]}};\n",
              "      var embedOpt = {\"mode\": \"vega-lite\"};\n",
              "\n",
              "      function showError(el, error){\n",
              "          el.innerHTML = ('<div class=\"error\" style=\"color:red;\">'\n",
              "                          + '<p>JavaScript Error: ' + error.message + '</p>'\n",
              "                          + \"<p>This usually means there's a typo in your chart specification. \"\n",
              "                          + \"See the javascript console for the full traceback.</p>\"\n",
              "                          + '</div>');\n",
              "          throw error;\n",
              "      }\n",
              "      const el = document.getElementById('altair-viz');\n",
              "      vegaEmbed(\"#altair-viz\", spec, embedOpt)\n",
              "        .catch(error => showError(el, error));\n",
              "\n",
              "  </script>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n4nIiIPUAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}